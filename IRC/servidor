#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):

    # Dados recebe a concatenacao de dados residuais e dos dados
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''

    if dados == b'': # Se a string de dados recebidos for vazia
        return sair(conexao)

    # Caso string termine com quebra de linha, basta separa-la
    # em eventuais quebras de linha internas
    if dados.endswith(b'\r\n'):
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
    # Caso contrario, alem de separar nas quebras de linhas
    # internas, deve-se levar em consideracao os dados residuais
    else:
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
        conexao.dados_residuais += dados.pop()

    for dado in dados:
        instrucao, conteudo = dado.split(b' ', 1)
        if instrucao == b'NICK':
            if validar_nome(conteudo):
                conexao.enviar(b':server 001 ' + conteudo + b' :Welcome\r\n')
                conexao.enviar(b':server 422 ' + conteudo + b' :MOTD File is missing\r\n')
            else:
                conexao.enviar(b':server 432 ' + conexao.apelido_inicial + b' ' + conteudo + b' :Erroneous nickname\r\n')
        if instrucao == b'PING':
            conexao.enviar(b':server PONG server :' + conteudo + b'\r\n')

    print(conexao, dados)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    # Armazena os dados residuais no atributo de instância de conexao
    conexao.dados_residuais = b''
    # Armazena apelido_inicial do usuario na conexao
    conexao.apelido_inicial = b'*'
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
