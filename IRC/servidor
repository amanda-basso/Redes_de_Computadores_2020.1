#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):

    # Dados recebe a concatenacao de dados residuais e dos dados
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''

    if dados == b'': # Se a string de dados recebidos for vazia
        return sair(conexao)

    # Caso string termine com quebra de linha, basta separa-la
    # em eventuais quebras de linha internas
    if dados.endswith(b'\r\n'):
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
    # Caso contrario, alem de separar nas quebras de linhas
    # internas, deve-se levar em consideracao os dados residuais
    else:
        dados = dados.split(b'\r\n')
        dados = list(filter((b'').__ne__, dados))
        conexao.dados_residuais += dados.pop()

    # Aqui, para cada elemento da lista dados, ou seja, para cada mensagem
    # é necessario fazer o tratamento do passo 1
    for dado in dados:
        conexao.enviar(b':server PONG server :' + dado.split(b' ', 1)[1] + b'\r\n')

    print(conexao, dados)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    # Armazena os dados residuais no atributo de instância de conexao
    conexao.dados_residuais = b''
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
